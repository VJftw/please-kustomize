"""
Build rules for working with [Helm](https://helm.sh).

The Helm Architecture describes 3 concepts:

> For Helm, there are three important concepts:
> 1. The chart is a bundle of information necessary to create an instance of a
>    Kubernetes application.
> 2. The config contains configuration information that can be merged into a
>    packaged chart to create a releasable object.
> 3. A release is a running instance of a chart, combined with a specific
>    config.

The build definitions defined in this file consider these concepts whereby:

* The `helm_chart` build definition implements 1). and 2). by outputting Helm
  Chart packages with the given configuration.
* The `helm_release` build definition implements 3). by enabling users to
  specify many running instances of a given `helm_chart` or `remote_file`'d Helm
  Chart with per release specific configuration as code.
"""
subinclude("///shell//build_defs:shell")

DEFAULT_LABELS=["helm"]

_HELM_RELEASE_PREBUILD_MARKER_ENV="# _PREBUILD_ENV_"

def helm_toolchain(
    name: str,
    version: str,
    hashes: list = [],
    plugins: list = [],
    labels: list = [],
    visibility: list = [],
):
    """
    Build rule for setting up Helm 3 with support for plugins.

    Args:
        name: The name of the build rule.
        version: The version of Helm to download.
        plugins: A list of Please targets to install as Helm plugins.
        labels: Additional Please labels.
        visibility: The Please targets to make this Helm toolchain visibile to.
    """
    labels += DEFAULT_LABELS

    binary=remote_file(
        name = tag(name, "binary"),
        binary = True,
        extract = True,
        hashes = hashes,
        url = f"https://get.helm.sh/helm-v{version}-{CONFIG.OS}-{CONFIG.ARCH}.tar.gz",
        exported_files = [f"{CONFIG.OS}-{CONFIG.ARCH}/helm"],
    )

    plugins_dir=genrule(
        name = tag(name, "plugins"),
        srcs = plugins,
        outs = [tag(name, "plugins")],
        cmd = """
        mkdir -p $OUTS
        for src in $SRCS; do
            cp -r $src $OUTS/
        done
        """,
    )

    genrule(
        name = name,
        data = [binary, plugins_dir],
        outs = [f"{name}.sh"],
        cmd = f"""
cat <<EOF > $OUTS
#!/usr/bin/env bash
set -Eeuo pipefail
REPO_ROOT="\\\$( cd -- "\\\$(dirname "\\\$0")" >/dev/null 2>&1 ; pwd -P | sed 's#/plz-out/.*##g')"
export HELM_PLUGINS="\\\$REPO_ROOT/$(out_location {plugins_dir})"
"\\\$REPO_ROOT/$(out_exe {binary})" "\\\$@"
EOF
        """,
        binary = True,
        labels = labels,
        visibility = visibility,
    )

def helm_chart(
    name: str,
    chart_type: str = "application",
    description: str = "A Helm chart for Kubernetes.",
    app_version: str = "0.0.0",
    src_crds: list = [],
    src_templates: list = [],
    src_values: str = "",
    src_values_schema: str = "",
    src_readme: str = "",
    src_licence: str = "",
    subcharts: list = [],
    labels: list = [],
    visibility: list = [],
    images: list = [],
):
    """
    Build rule for creating Helm Charts.

    A chart is a collection of files that describe a related set of Kubernetes
    resources. A single chart might be used to deploy something simple, like a
    memcached pod, or something complex, like a full web app stack with HTTP
    servers, databases, caches, and so on.

    https://helm.sh/docs/topics/charts/

    This build rule outputs the Helm Chart as a packaged chart versioned as
    development and tagged with a digest of the inputs as per the Semver 2.0
    spec:
        `0.0.0+<sh256sum of inputs>`

    > https://semver.org/spec/v2.0.0.html
    > 4. Major version zero (0.y.z) is for initial development. Anything MAY
    >    change at any time. The public API SHOULD NOT be considered stable.
    > 10. Build metadata MAY be denoted by appending a plus sign and a series of
    >     dot separated identifiers immediately following the patch or
    >     pre-release version. Identifiers MUST comprise only ASCII
    >     alphanumerics and hyphens [0-9A-Za-z-]. Identifiers MUST NOT be empty.
    >     Build metadata MUST be ignored when determining version precedence.
    >     Thus two versions that differ only in the build metadata, have the
    >     same precedence. Examples: 1.0.0-alpha+001, 1.0.0+20130313144700,
    >     1.0.0-beta+exp.sha.5114f85, 1.0.0+21AF26D3â€”-117B344092BD.

    Additional tooling should be used to promote a development Helm Chart into
    a non-development, released version.

    Args:
        name: The name of the Helm Chart.
        chart_type: The type of the Helm Chart. Either "application" or
                    "library". Defaults to "application".
        description: The description of the Helm package.
        app_version: The application version of the Helm package.
        src_crds: The files containing CRDs. These must only contain CRDs.
        src_templates: The files to use as templates. These will be placed in
                       the templates/ folder.
        src_values: The values file to use to use as default values.
        src_values_schema: A JSON Schema for imposing a structure on the
                           values.yaml file.
        src_readme: A human-readable README file.
        src_licence: A plain text file containing the license for the chart.
        subcharts: The subcharts for this Helm chart.
        labels: Additional Please labels.
        visibility: The Please targets to make this Helm package visibile to.
        images: The Please 'image' targets that this Helm Chart uses. These
                should have a `_push` subrule that will be used to push them
                before the Helm Chart is installed/upgraded. The `_push` subrule
                must satisfy the same functionality as provided by the
                `VJftw/please-buildkit` build definitions. A more formal API
                will be defined in a future version of this plugin.
    """
    assert chart_type in ["application", "library"], f"{chart_type} is an invalid chart_type."
    images = [canonicalise(img) for img in images]

    helm_tool = CONFIG.K8S.HELM_TOOL
    labels += DEFAULT_LABELS

    srcs_values = []
    if src_values:
      srcs_values = [src_values]

    srcs_values_schema = []
    if src_values_schema:
        srcs_values_schema = [src_values_schema]

    srcs_readme = []
    if src_readme:
        srcs_readme = [src_readme]

    srcs_licence = []
    if src_licence:
        srcs_licence = [src_licence]


    context=tarball(
        name = f"_{name}#context.tar",
        srcs = src_templates + srcs_values + subcharts,
    )

    chart_yaml=genrule(
        name = f"_{name}#chart.yaml",
        srcs = [context],
        outs = [f"_{name}#chart.yaml"],
        cmd = f"""
version="$(echo "$(sha256sum $SRCS | cut -f1 -d" " | cut -c1-7)")"
cat <<EOF > $OUTS
apiVersion: v2
name: "{name}"
description: "{description}"
type: "application"
version: 0.0.0+$version
appVersion: "{app_version}"
EOF
        """,
    )

    image_labels=[f"image:{img}" for img in images]

    post_build_functions = [_add_image_labels]

    package=genrule(
        name = name,
        post_build = lambda rule, _cmd: [fn(rule, src_templates, subcharts) for fn in post_build_functions],
        srcs = {
            "chart_yaml": [chart_yaml],
            "crds": src_crds,
            "templates": src_templates,
            "values": srcs_values,
            "values_schema": srcs_values_schema,
            "readme": srcs_readme,
            "licence": srcs_licence,
            "subcharts": subcharts,
        },
        # output_dirs = ["outs"],
        outs = [f"{name}.tgz"],
        cmd = f"""
        set -e
        chart_dir="$(mktemp -d)"
        chart_yaml_path="$SRCS_CHART_YAML"
        expected_chart_yaml_path="${{chart_dir}}/Chart.yaml"
        mv "$chart_yaml_path" "$expected_chart_yaml_path"

        # shift crds into crds/
        if [ -n "${{SRCS_CRDS:-}}" ]; then
            mkdir -p "${{chart_dir}}/crds"
            for crd in $SRCS_CRDS; do
                cp -r "$crd" "${{chart_dir}}/crds/"
            done
        fi

        # shift templates into templates/
        if [ -n "${{SRCS_TEMPLATES:-}}" ]; then
            mkdir -p "${{chart_dir}}/templates"
            for tmpl in $SRCS_TEMPLATES; do
                cp -r "$tmpl" "${{chart_dir}}/templates/"
            done
        fi

        # shift values to values.yaml
        if [ -n "${{SRCS_VALUES:-}}" ]; then
            cp "$SRCS_VALUES" "${{chart_dir}}/values.yaml"
        fi

        # shift values schema to values.schema.json
        if [ -n "${{SRCS_VALUES_SCHEMA:-}}" ]; then
            cp "$SRCS_VALUES_SCHEMA" "${{chart_dir}}/values.schema.json"
        fi

        # shift readme to README.md
        if [ -n "${{SRCS_README:-}}" ]; then
            cp "$SRCS_README" "${{chart_dir}}/README.md"
        fi

        # shift licence to LICENSE
        if [ -n "${{SRCS_LICENCE:-}}" ]; then
            cp "$SRCS_LICENCE" "${{chart_dir}}/LICENSE"
        fi

        # shift subcharts into charts directory
        if [ -n "${{SRCS_SUBCHARTS:-}}" ]; then
            echo "dependencies:" >> "$expected_chart_yaml_path"
            mkdir -p "${{chart_dir}}/charts"
            for subchart in $SRCS_SUBCHARTS; do
                subchart_name="$($TOOL show chart $subchart | grep "^name:" | cut -f2 -d: | xargs)"
                subchart_version="$($TOOL show chart $subchart | grep "^version:" | cut -f2 -d: | xargs)"
                echo "- name: $subchart_name\n  version: $subchart_version" >> "$expected_chart_yaml_path"
                mv "$subchart" "${{chart_dir}}/charts/"
            done
        fi

        mkdir -p outs/
        $TOOL package "${{chart_dir}}" && mv *.tgz $OUTS
        """,
        tools = [helm_tool],
        labels = labels + ["helm_chart"] + image_labels,
        visibility = visibility,
    )

    sh_cmd(
        name = f"{name}_lint",
        data = [package, helm_tool],
        shell = "/usr/bin/env bash",
        cmd = f"""
set -Eexuo pipefail
$(out_exe {helm_tool}) lint $(out_location {package})
        """,
        labels = ["lint"] + labels,
        visibility = visibility,
    )

    for show_cmd in [
        "chart",
        "crds",
        "readme",
    ]:
        sh_cmd(
            name = f"{name}_show_{show_cmd}",
            data = [package, helm_tool],
            shell = "/usr/bin/env bash",
            cmd = f"""
set -Eexuo pipefail
$(out_exe {helm_tool}) show {show_cmd} $(out_location {package})
            """,
            labels = labels + [f"helm_show_{show_cmd}"]
        )

    return package

def _add_image_labels(rule_name, src_templates: list, subcharts: list):
    rule_name=canonicalise(":"+rule_name)

    for src in src_templates:
        if src.startswith("//") or src.startswith(":"):
            src=canonicalise(src)
            img_labels = get_labels(src, "image:", False)
            for l in img_labels:
                add_label(rule_name, "image:"+l)

    for src in subcharts:
        src=canonicalise(src)
        img_labels = get_labels(src, "image:", False)
        for l in img_labels:
            add_label(rule_name, "image:"+l)

def helm_remote_chart(
    name: str,
    url: str,
    hashes: list = [],
    licences: list = [],
    labels: list = [],
    visibility: list = [],
    images: list = [],
):
    """
    Build rule for fetching remote Helm Charts to use with Please.

    This build rule fetches the given packaged the Helm Chart and adds the given
    images as dependencies for it. This allows you to utilise the benefits of
    Please with external Helm Charts.

    Args:
        name: The name of the Helm Chart.
        url: The url for the external Helm Chart. Must end in `.tgz`.
        licences: The licences associated with the Helm Chart.
        labels: Additional Please labels.
        visibility: The Please targets to make this Helm package visibile to.
        images: The Please 'image' targets that this Helm Chart uses. These
                should have a `_push` subrule what will be used to push them
                before the Helm Chart is installed/upgraded. The `_push` subrule
                must satisfy the same functionality as provided by the
                `VJftw/please-buildkit` build definitions. A more formal API
                will be defined in a future version of this plugin.
    """
    helm_tool = CONFIG.K8S.HELM_TOOL
    images = [canonicalise(img) for img in images]

    image_labels=[f"image:{img}" for img in images]

    package=remote_file(
        name = name,
        url = url,
        hashes = hashes,
        licences = licences,
        labels = labels + image_labels,
        visibility = visibility,
        exported_deps = images,
    )

    for show_cmd in [
        "chart",
        "crds",
        "readme",
        "values",
    ]:
        sh_cmd(
            name = f"{name}_show_{show_cmd}",
            data = [package, helm_tool],
            shell = "/usr/bin/env bash",
            cmd = f"""
set -Eexuo pipefail
$(out_exe {helm_tool}) show {show_cmd} $(out_location {package})
            """,
            labels = labels + [f"helm_show_{show_cmd}"]
        )

    return package

def helm_release(
    name: str,
    src_chart: str,
    release_name: str = "",
    kube_context: str = "",
    namespace: str = "default",
    atomic: bool = True,
    create_namespace: bool = True,
    description: str = "",
    force: bool = False,
    timeout: str = "5m0s",
    wait: bool = True,
    wait_for_jobs: bool = True,
    values_files: list = [],
    skip_crds: bool = False,
    labels: list = [],
    visibility: list = [],
):
    """
    Build rule for installing and managing Helm Charts as Releases.

    Args:
        name: The name of the Please target and its subrules. This is the
              default for the Helm Release name on the cluster.
        src_chart: The target which outputs the Helm Chart as a `.tgz`.
        release_name: An optional custom name for the Helm Release name on the
                      cluster. Release names are unique per Cluster namespace
                      so these do not need to be globally unique.
        kube_context: The Kubernetes context to use from kubeconfig. If a Please
                      Target is passed to this, it must implement the following
                      subrules:
                        - `:_{name}#kube_context`:
                            A binary which prints the Kubernetes Context name to
                            use. This may be used for authentication before
                            `helm` is called.
                        - `:_{name}#image_pusher`:
                            A binary which pushes images before `helm` is
                            called. It should accept a list of image Please
                            targets as positional arguments.
                        - `:_{name}#helm_post_renderer`:
                            A binary to be used as a post-renderer to the `helm`
                            command. This should implement the post-rendering
                            API provided by the Helm documentation.
                            (https://helm.sh/docs/topics/advanced/#post-rendering).
                       The following Environment Variables are set:
                        - `IMAGE_TARGETS`:
                           A space-separated list of canonical Please
                           targets which represent the images associated
                           with the Helm chart.

        namespace: The namespace to deploy the Helm Release to.
        atomic: If True, upgrade process rolls back changes made in case of
                failed upgrade. The --wait flag will be set automatically if
                --atomic is used.
        create_namespace: Create the release namespace if not present.
        description: Add a custom description.
        force: Force resource updates through a replacement strategy.
        timeout: Time to wait for any individual Kubernetes operation (like Jobs
                 for hooks) (default 5m0s).
        wait: If True, will wait until all Pods, PVCs, Services, and minimum
              number of Pods of a Deployment, StatefulSet, or ReplicaSet are in
              a ready state before marking the release as successful. It will
              wait for as long as `timeout`.
        wait_for_jobs: If True and --wait enabled, will wait until all Jobs have
                       been completed before marking the release as successful.
                       It will wait for as long as --timeout.
        values_files: Custom values files to use when installing or templating
                      the package.
        skip_crds: Whether or not to skip the installation of chart CRDs.
        labels: Additional Please labels.
        visibility: The Please targets to make this Helm package visibile to.
    """
    helm_tool = CONFIG.K8S.HELM_TOOL

    if not release_name:
        release_name = name

    labels += DEFAULT_LABELS

    if kube_context.startswith(":"):
        kube_context = canonicalise(kube_context)

    src_chart = canonicalise(src_chart)

    values_files_targets = _helm_release_values_files_targets(values_files)

    helm_cmd_configs = {
        "history": {
            "additional_flags": {
                # "max": 256,
                # "output": "table",
            },
        },
        "rollback": {
            "additional_flags": {
                "cleanup-on-fail": atomic,
                # "dry-run": False,
                # "force": False,
                # "history-max": 0,
                # "no-hooks": False,
                # "recreate-pods": False,
                "timeout": timeout,
                "wait": wait,
                "wait-for-jobs": wait_for_jobs,
            },
        },
        "status": {
            "additional_flags": {
                # "output": "table",
                # "revision": 1,
                # "show-desc": False,
            },
        },
        "get values": {
            "additional_flags": {
                # "all": False,
                # "output": "table",
                # "revision": 1,
            },
        },
        "uninstall": {
            "additional_flags": {
                "description": description,
                # "dry-run": False,
                # "keep-history": False,
                # "no-hooks": False,
                "timeout": timeout,
                "wait": wait,
            },
        },
        "template": {
            "additional_args": [src_chart],
            "kube_context_post_renderer": True,
            "pre_build_fns": [
                _set_image_targets,
            ],
            "additional_flags": {
                # "api-versions": [],
                "atomic": atomic,
                # "ca-file": "",
                # "cert-file": "",
                "create-namespace": create_namespace,
                # "dependency-update": False,
                "description": description,
                # "devel": False,
                # "disable-openapi-validation": False,
                # "dry-run": False,
                # "generate-name": False,
                # "include-crds": False,
                # "insecure-skip-tls-verify": False,
                # "is-upgrade": False,
                # "key-file": "",
                # "keyring": "",
                # "kube-version": "",
                # "name-template": "",
                # "no-hooks": False,
                # "output-dir": "",
                # "pass-credentials": False,
                # "password": "",
                # "post-renderer": "",
                # "post-renderer-args": [],
                # "release-name": False,
                # "render-subchart-notes": False,
                # "repo": "",
                # "set": [],
                # "set-file": [],
                # "set-json": [],
                # "set-string": [],
                "skip-crds": skip_crds,
                # "skip-tests": False,
                "timeout": timeout,
                # "username": "",
                # "validate": False,
                "values": values_files_targets,
                # "verify": False,
                # "version": "",
                "wait": wait,
                "wait-for-jobs": wait_for_jobs,
            },
        },
        "upgrade": {
            "additional_args": [src_chart],
            "kube_context_post_renderer": True,
            "pre_build_fns": [
                _set_image_targets,
            ],
            "additional_flags": {
                "atomic": atomic,
                # "ca-file": "",
                # "cert-file": "",
                "cleanup-on-fail": atomic,
                "create-namespace": create_namespace,
                # "dependency-update": False,
                "description": description,
                # "devel": False,
                # "disable-openapi-validation": False,
                # "dry-run": False,
                # "force": False,
                # "history-max": 0,
                # "insecure-skip-tls-verify": False,
                "install": True,
                # "key-file": "",
                # "keyring": "",
                # "no-hooks": False,
                # "output": "table",
                # "pass-credentials": False,
                # "password": "",
                # "post-renderer": "",
                # "post-renderer-args": [],
                # "render-subchart-notes": False,
                # "repo": "",
                "reset-values": True,
                # "reuse-values": False,
                # "set": [],
                # "set-file": [],
                # "set-json": [],
                # "set-string": [],
                "skip-crds": skip_crds,
                "timeout": timeout,
                # "username": "",
                "values": values_files_targets,
                # "verify": False,
                # "version": "",
                "wait": wait,
                "wait-for-jobs": wait_for_jobs,
            },
        },
    }

    if CONFIG.K8S.HELM_ENABLE_DEPLOYER == "true":
        helm_cmd_configs["diff upgrade"] = {
            "additional_args": [src_chart],
            "kube_context_post_renderer": True,
            "pre_build_fns": [
                _set_image_targets,
            ],
            "additional_flags": {
                # "allow-unreleased": False,
                # "api-versions": [],
                # "context": -1,
                "detailed-exitcode": True,
                # "devel": False,
                # "disable-openapi-validation": False,
                # "dry-run": False,
                # "include-tests": False,
                "install": True,
                # "kube-version": "",
                # "kubeconfig": "",
                # "normalize-manifests": False,
                # "output": "diff",
                # "post-renderer": "",
                # "repo": "",
                "reset-values": True,
                # "reuse-values": False,
                # "set": [],
                # "set-file": [],
                # "set-json": [],
                # "set-string": [],
                # "show-secrets": False,
                # "strip-trailing-cr": False,
                # "suppress": [],
                # "suppress-secrets": False,
                # "three-way-merge": False,
                "values": values_files_targets,
                # "version": "",
            },
        }

    for helm_release_cmd, helm_release_cmd_config in helm_cmd_configs.items():
        _helm_release_cmd(
            name,
            helm_tool,
            kube_context,
            namespace,
            release_name,
            helm_release_cmd,
            helm_release_cmd_config,
            labels,
            visibility,
        )

    if CONFIG.K8S.HELM_ENABLE_DEPLOYER == "true":
        # push images
        _push_images(
            name,
            src_chart,
            kube_context,
            labels,
            visibility,
        )

        # deploy
        _deploy(
            name,
            src_chart,
            values_files_targets,
            kube_context,
            labels,
            visibility,
        )


def _helm_release_values_files_targets(values_files: list):
    """
    Returns the given values files as a list of Please targets, creating new
    Please targets as necessary.
    """
    values_files_targets=[]
    for trgt in values_files:
        if not (trgt.startswith("//") or trgt.startswith(":")):
            trgt=export_file(
                name = f"values_{trgt}",
                src = trgt,
            )

        values_files_targets += [canonicalise(trgt)]

    return values_files_targets


def _helm_release_template_test(
    name: str,
    helm_tool: str,
    src_chart: str,
    values_files_targets: list,
    labels: list,
):
    """
    Tests whether or not the Helm Release will template succesfully with the
    given values files.
    """
    values_files_test_flags = [f"-f $(location {f})" for f in values_files_targets]
    values_files_test_cmd = " ".join(values_files_test_flags)

    return gentest(
        name = f"{name}_template_test",
        data = [src_chart] + values_files_targets,
        test_cmd = f"""
set -Eexuo pipefail
$TOOL template --debug $(location {src_chart}) {values_files_test_cmd}
        """,
        no_test_output = True,
        test_tools = [helm_tool],
        labels = labels + ["helm_template_test"],
    )

def _helm_release_cmd(
    name: str,
    helm_tool: str,
    kube_context: str,
    namespace: str,
    release_name: str,
    cmd: str,
    config: dict,
    labels: list,
    visibility: list,
):
    safe_cmd=cmd.replace(" ", "_")
    if "aliases" not in config:
        config["aliases"] = []
    if "additional_flags" not in config:
        config["additional_flags"] = {}
    if "additional_args" not in config:
        config["additional_args"] = []
    if "kube_context_post_renderer" not in config:
        config["kube_context_post_renderer"] = False
    if "pre_build_fns" not in config:
        config["pre_build_fns"] = []
    if "post_build_fns" not in config:
        config["post_build_fns"] = []

    for alias in [safe_cmd] + config["aliases"]:
        args=[
            f"$(out_exe {helm_tool})",
            cmd,
            release_name,
            "--namespace", namespace,
        ]
        data = [helm_tool]

        for arg in config["additional_args"]:
            if arg.startswith("//"):
                data += [arg]
                args += [f"$(out_location {arg})"]
            elif arg:
                args += [arg]

        if kube_context:
            if kube_context.startswith("//"):
                kube_context_target=_canonical_tag(kube_context, "kube_context")
                args += ["--kube-context", f"\\\$($(out_exe {kube_context_target}))"]
                data += [kube_context_target]
            if config["kube_context_post_renderer"]:
                post_renderer_target=_canonical_tag(kube_context, "helm_post_renderer")
                args += ["--post-renderer", f"$(out_exe {post_renderer_target})"]
                data += [post_renderer_target]

        for arg_k, arg_v in config["additional_flags"].items():
            if isinstance(arg_v, bool):
                if arg_v:
                    args+=[f"--{arg_k}"]
            elif isinstance(arg_v, str):
                if arg_v.startswith("//"):
                    data += [arg_v]
                    args+=[f"--{arg_k}=$(out_location {arg_v})"]
                elif arg_v:
                    args+=[f"--{arg_k}=\"{arg_v}\""]
            elif isinstance(arg_v, list):
                for v in arg_v:
                    if v.startswith("//"):
                        data += [v]
                        args+=[f"--{arg_k}=$(out_location {v})"]
                    elif v:
                        args+=[f"--{arg_k}={v}"]

        joined_args = " ".join(args)

        genrule(
            name = f"{name}_{alias}",
            outs = [f"{name}_{alias}.sh"],
            pre_build = lambda rule: [fn(rule, data) for fn in config["pre_build_fns"]],
            post_build = lambda rule, output: [fn(rule, output, data) for fn in config["post_build_fns"]],
            data = data,
            binary = True,
            cmd = f"""
cat <<EOF > $OUTS
#!/usr/bin/env bash
set -Eeuo pipefail
{_HELM_RELEASE_PREBUILD_MARKER_ENV}
set -x
{joined_args} \\\$@
EOF
            """,
            labels = labels + [f"helm_{safe_cmd}", "helm_release", kube_context],
            visibility = visibility,
        )

def _set_image_targets(rule_name: str, data: list):
    image_labels = []
    for d in data:
        image_labels += get_labels(d, "image:", False)

    image_targets = [canonicalise(lbl.removeprefix("image:")) for lbl in image_labels]
    image_targets_bash_arr = " ".join(image_targets)
    cmd = get_command(rule_name)
    new_cmd = cmd.replace(
        _HELM_RELEASE_PREBUILD_MARKER_ENV,
        f'{_HELM_RELEASE_PREBUILD_MARKER_ENV}\nexport IMAGE_TARGETS="{image_targets_bash_arr}"')
    set_command(rule_name, new_cmd)


def _push_images(
    name: str,
    src_chart: str,
    kube_context: str,
    labels: list = [],
    visibility: list = [],
):
    if not kube_context or not kube_context.startswith("//"):
        return

    image_pusher_target=_canonical_tag(kube_context, "image_pusher")
    data = [src_chart, image_pusher_target]

    genrule(
        name = f"{name}_push_images",
        outs = [f"{name}_push_images.sh"],
        pre_build = lambda rule: [fn(rule, data) for fn in [_set_image_targets]],
        data = data,
        binary = True,
        cmd = f"""
cat <<EOF > $OUTS
#!/usr/bin/env bash
set -Eeuo pipefail
{_HELM_RELEASE_PREBUILD_MARKER_ENV}
set -x
$(out_exe {image_pusher_target}) \\\$@
EOF
        """,
        labels = labels + [f"helm_push_images", "helm_release", kube_context],
        visibility = visibility,
    )

def _helm_release_deploy_push_images_data(rule_name: str, data: list):
    image_targets = []
    for d in data:
        image_targets += get_labels(d, "image:", False)
    image_push_targets=[f"{t}_push" for t in image_targets]

    for image_push_target in image_push_targets:
        add_data(rule_name, image_push_target)
        add_dep(rule_name, image_push_target)

def _deploy(
    name: str,
    src_chart: str,
    values_files_targets: list,
    kube_context: str,
    labels: list = [],
    visibility: list = [],
):
    deployer_tool=CONFIG.K8S.HELM_DEPLOYER_TOOL

    genrule(
        name = f"{name}_deploy",
        outs = [f"{name}_deploy.sh"],
        pre_build = lambda rule: [fn(rule, [src_chart]) for fn in [
            _helm_release_deploy_push_images_data,
            _set_image_targets,
        ]],
        data = [
            deployer_tool,
            src_chart,
            f":{name}_push_images",
            f":{name}_upgrade",
            f":{name}_diff_upgrade",
        ],
        binary = True,
        cmd = f"""
cat <<EOF > $OUTS
#!/usr/bin/env bash
set -Eeuo pipefail
{_HELM_RELEASE_PREBUILD_MARKER_ENV}

$(out_exe {deployer_tool}) \\
    idempotent_deploy \\
    --helm_diff_upgrade_binary="$(out_exe :{name}_diff_upgrade)" \\
    --helm_push_images_binary="$(out_exe :{name}_push_images)" \\
    --helm_upgrade_binary="$(out_exe :{name}_upgrade)"
EOF
        """,
        labels = labels + [f"helm_deploy", "helm_release", kube_context],
        visibility = visibility,
    )


def _canonical_tag(label: str, tag_str: str):
    label_parts = label.split(":")
    pkg = label_parts[0]
    name = label_parts[1]

    new_name = f"_{name}#{tag_str}"

    new_label = ":".join([pkg, new_name])

    return canonicalise(new_label)
